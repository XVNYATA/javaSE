网络通讯的基本要求：
    IP   : 
        IP目前有两个主要的版本
        IPv4 : 使用32位的整数来表示一个电脑，最多表示42亿的电脑，因为IP是无符号的整数。
            典型的浪费：
                127.0.0.1  永远表示本机，Windows的cmd里面输入ipconfig可以看到此ip。这个ip也被称之为是链路回环地址。
                192 开头，都是属于局域网IP。
                10  开头的，往往是属于城域网的IP。移动内部的网络、长城宽度。
        IPv6 : 使用128位的整数来表示一个计算设备。最多可以表示 2^128 个计算设备，理论上可以为地球上的每个沙子提供一个IP。

        通过域名，找到IP，再通过IP找到电脑。这时候就可以连接到这个IP对应的电脑上面。

    端口 : 为了在一台电脑里面区分很多不同作用的网络程序，给每个程序分配一个数字，这个数字就是端口。
        程序绑定到端口，所有发送到此端口的数据，都会被转发给对应的程序。


        端口被分为三大类
            公认端口  : 需要通过国际上的认证的服务，可以使用公认端口。
                范围是小于1024的端口都是属于公认端口，在非Windows系统必须有root权限才能使用公认端口。
                比如 ftp 服务使用 21 端口和 20 端口。
                比如 http 服务（通过浏览器访问的网站），使用80端口。
                https是安全的、加密的http服务，使用443端口。
                smtp 发送邮件，简单邮件传输协议，使用25端口
                pop3 接收邮件的协议，使用110端口


            注册端口  : 1024~49151，松散绑定一些服务
                随便都可以使用的，只要不和其他程序冲突即可。

                服务端程序在大部分的情况下，绑定的端口都是属于注册端口。

            动态端口/私有端口:49152~65535，应用程序使用的动态端口，一般应用程序不主动使用它，但是类似BT之类的软件通常用这些端口

                客户端连接服务器的时候，需要使用一个随机端口，那么就会使用动态端口。


            端口是一个16位的无符号数字，范围是 0 ~ 65535



    IP太长，不好记。为了方便记忆，于是提供了一个【域名】，域名通过专门的一个map，来实现 名称 和 ip 的对应关系映射。
    map是一个键值对，域名解析的过程，就是通过刚 【域名】 这个键，解析为 【IP】 这个值！
    通讯的时候，只能使用IP来进行通讯，但是记忆的时候通常都是通过域名来记忆的！
    域名解析服务器也被称之为“DNS”，Domain Naming Service。


两台电脑，通过网络连接起来以后，需要使用IO、多线程技术


开发一个简单的、给浏览器使用的服务端

    浏览器就是一个典型的客户端，而淘宝、百度都是属于服务端。
    开发服务端，服务端必须要监听/绑定到一个端口。
    服务端需要不停接收来自浏览器的数据，服务器永远不会知道浏览器什么时候过来访问。
    接收到浏览器的连接，就需要建立起输入流才能读取浏览器发送到服务器的信息；服务器发送给浏览器的信息，就需要使用输出流！


    步骤
        1.服务器需要监听/绑定一个端口。
            这里使用 8000 端口。

            //创建一个服务器端的Socket，绑定到8000端口
            ServerSocket serverSocket = new ServerSocket( 8000 );

        2.服务器不断接收浏览器的连接
            while( true )
            {
                // 接受浏览器（客户端）的连接，连接建立以后，会得到一个Socket对象。
                // Socket表示两台电脑连接的一个通道。
                Socket socket = serverSocket.accept();
            }
        3.接收到连接以后，需要创建输入流，获取数据

            // 通过Socket通道获取的输入流，可以获取对方发送过来的信息
            InputStream in = socket.getInputStream();

        4.数据处理完成以后，使用输出流把信息返回给浏览器

            // 把数据发送给对方的输出流
            OutputStream out = socket.getOutputStream();



        5.服务器程序开发完成以后，把服务器启动起来。
            服务器启动以后，相当于服务器已经在等待浏览器。
            这个时候，浏览器地址栏输入 http://192.168.10.222:8000











