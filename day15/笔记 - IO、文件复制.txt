IO = Input / Output


     读入  / 写出


    读入、写出，都是相对于内存来讲的。
    读入：把外部的数据读取，放到内存里面。内存里面使用变量来存储数据。
        比如QQ收取到的聊天信息，属于从网络“读入”。
        比如从硬盘上打开一个视频文件，看电影。从硬盘读入。

    写出: 把内存里面的数据，写出到外部的其他存储设备，比如硬盘、网络等。
        比如QQ发送信息出去给好友，属于把数据写出到网络。
        比如复制一个文件到U盘，首先要从一个源读入放到内存中，然后再把内存的数据写出到U盘。


所有输入对象，都会有对应输出对象。
    比如 InputStream ，表示一个字节输入流。
         OutputStream，表示字节输出流。


流
    表示连续不断的数据流。


IO的类，都在 java.io 包下面。



InputStream
    read  : 从输入流数据中读取数据放到内存。如果输入流还没有可用的数据，read方法会阻塞、等待。
        返回数据中的内容。如果读取到文件的结尾，返回-1。
    available : 返回流里面还有多少个可用的字节数。
    close : 关闭流。
    


OutputStream
    write : 把一个字节写到文件中。如果要写出字符，必须把字符转换为byte数字。
    close : 关闭流。
    flush : 把流里面的数据，刷出到目标。在调用close方法的时候，会自动调用一次。
            如果想让对方收到完整的数据，又不想关闭流的时候，必须调用一次flush。
            如果没有关闭流，也没有调用flush，那么对方可能会在比较久之后才收到完整的数据。



特别注意：
    一定要养成良好的习惯，自己创建的流，必须自己关闭！
    在Java 7以后的代码中，建议使用try-with-resources语法，自动关闭。


流从操作的数据来看，分为两大类：
    字节流
        Stream结尾的，都是字节流！
    字符流



练习
    1.基于字节流，实现一个文件的复制。

    步骤：
        1.确定要复制的源文件
            /home/data/workspace/teaching/2.teach/J1604/JavaSE/day15/02-输入、输出流的简单使用.mp4

        2.确定把源文件复制到哪个地方(存储目标)
            /tmp/io/a.mp4


        3.分别创建输入流、输出流

        4.读取源文件，把读取到的数据放在内存中的一个变量里面。


        5.把读取到的数据，写出到目标文件。


    2.基于前面的练习，优化性能
        合适大小的缓冲，能够有效提高程序的I/O性能。

        字节流里面使用缓冲，非常简单，继续使用原来的read、write方法，只是原来操作的数据是int类型的，表示一个字节。
        现在缓冲是一个字节数组，表示很多个字节。


        假设现在字节数组的大小是1K，意味着每次最多读取1024个字节进来、写出也是最多每次写出1024个字节。

        步骤
            1.原来read的时候，只是使用了无参的read方法，现在改为需要byte[]的参数的方法。
                这个方法是把数据读取放到byte数组里面，尽量填满byte数组。
                方法的返回值表示读取了多少个字节放到数组里面。
                方法返回-1表示，没有读取到任何数据、流结束了！

            2.原来write的时候，只是写出一个字节，现在需要改为把byte数组里面的数据写出。
                写出的时候，不能完整的把数组写出，必须按照read方法返回的字节数来写。
















