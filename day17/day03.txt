ByteArrayOutputStream: 可以将字节输入流转换成一个字节数组 
     ---- .toByteArray();

序列化(Serialize)  ：

    在网络通信中对象数据的传递，以及javaEE的框架技术有大量的使用 

    ObjectInputStream   ObjectOutputStream :用于实现对象序列化 

    将对象数据保存到磁盘的操作就可以理解为序列化操作！

    对象序列化的步骤：
        a.被序列化的对象必须实现一个序列化的接口 Serializable

	b.必须使用 ObjectOutputStream的 writeObject(Object obj)写序列化对象

    对象的反序列化步骤：
        a.定位序列化对象的地址
	b.将序列化对象文件转换成对象输入流 
	c.读取序列化对象 

    注意：序列化的对象中如果还存在复合类型(其他对象)都应该实现Serializable接口！
            因为序列化对象是传递性质的！也就是序列化的对象中如果还存在对象，
	    那么这些对象都会参与序列化。
    
    如果希望对象中的某个成员变量不参与序列化： 
       /**transient:申明这个成员变量不参与序列化  */
	private transient String passWord;

自定义序列化：  
     
      --- 对象必须先实现序列化接口 
     
     a.需要在序列化的对象中重写 序列化方法 
       和反序列化方法    
       
       序列化对应方法： 
          /** 序列化的时候使用 ： 被序列化的对象会自己调用 */
           private void writeObject(java.io.ObjectOutputStream out)throws IOException{

       反序列化：

           private void readObject(java.io.ObjectInputStream ois)throws IOException{

多线程   
     
     进程 和 线程  

     进程的特点：
        1.独立性 ：一个程序拥有自己的一个进程 ，进程之间互相独立，
	            每个进程都拥有自己独立的内存空间 ，进程占用内存

	2.多态性 : 一个程序是静止的，程序拥有了进程以后就变成动态了

	3.并发性 :  CPU (4 -- 进程)
	     多个“进程”实际上并不能保存都在同一时间刻度同时执行 
	     对于CPU为4核的来说，计算中永远都是最多只有四个进程是真正在执行的

	     之所有能感到很多进程一起执行 是因为CPU会轮询分时间片给某一个进程来使用
	     因为轮询的速度极快，所有人眼感觉都是在一起执行的

	     以上理论就是进程并发性

     进程的缺点：   
          a.占用内存 ，需要cpu分时维护 
	
     线程是属于进程的，一个进程可以包含多个线程：
        
     引入线程的优势：  
        a.线程内存开销比较小 
	b.线程之间可以互相通信
	c.线程很容易维护，使用完成可以销毁

java怎么使用多线程：  
      
      实际上，java拥有十分优秀的多线程操作！


java多线程的创建方式  ：
      
      1.直接继承 Thread类   
          优点：创建就是线程 

      2.实现Runnable接口  
          优点：可以提供出来创建多个线程

      3.实现Callable接口 
    
控制线程：  
      
      做饭：你负责洗锅  你老婆负责炒菜
             25 洗完了 -- 线程执行交给你老婆炒菜 

      join :
          使某个线程获得执行的机会，当前的线程必须等join进来的
	  线程执行完成，才可以得到CPU接着执行 
      
      线程的生命周期 ：  

      Thread.yield();  // 当前线程将cpu调度让出去 给别人使用
       注意：极有可能刚让出去就立马又获取了CPU调度
        
      
      线程有优先级： 
          可以给线程设置优先级 
	  优先级高的线程可以更多的获得CPU调度 
	  优先级：1 - 10  ， 推荐使用三个优先级 1 , 5  ,10

      后台线程 ：java中就存在一个后台线程：GC垃圾回收机制 

                 永远在后台执行的，必须其他线程都死掉

		 它才会死亡！

线程同步(解决线程安全问题)：  
       
     Account 
        private int cardId ;
	private double money ;     10000
     
     你用卡片登陆银行系统：
         1. 10000 - 5000  >    0    
	 2. 吐出来 5000      5000

     你老婆可能在柜员用存折机取现
         1.10000 - 5000 >      0 
         2. 吐出来 5000      5000

    多线程的临界区 ：
         多线程一般是在操作同一个资源对象的时候才可能出现线程安全问题
         可能出现线程安全隐患的方法或者代码块

    可以将不安全方法锁起来  ： synchronized 可以使被声明的方法
	   锁起来：同时只能有一个线程在调用此方法 。

	   可以使用synchronized来锁定需要操作的公共资源 
	               

     线程同步：
         你爸爸    存钱  800 
	 你就可以  取钱  800
          















      