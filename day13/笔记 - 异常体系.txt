异常处理
    异常 : 通常是由于意外的操作造成的意外情况。
    异常处理就是把意外情况处理掉，让程序继续执行。


处理语法

    try
    {
        //可能出现异常的代码、语句
    }
    catch( 异常类 变量名 )
    {
        //处理异常的地方，比如提示用户等。
    }



    try
    {
        //可能出现异常的代码、语句
    }
    catch( 异常类 变量名 )
    {
        //异常处理的代码块
    }
    finally
    {
        //不管是否出现异常，最终都一定会执行的代码块
        //通常用于释放资源、关闭数据库连接等操作
    }


    异常的处理注意点：
        1.try代码块表示异常处理的开始，后面可以跟着catch、finally。
        2.如果出现异常，代码会立即终止。如果在try代码块里面出现异常，马上会结束try代码块，并跳到catch代码块。
        3.不管是否出现了异常，都会执行finally。
        4.即使return以后，如果有finally，也会执行finally。
        5.在try、catch里面return的语句会执行，但是返回的数据，会被finally里面return的数据覆盖掉。不建议在finally里面写return。
        6.如果try后面有多个catch，那么必须把范围小的catch放前面。
        7.多个catch的时候，最多只能执行其中的一个catch，因为在try代码块里面出现异常以后，立即会结束try代码块，不会再引发下一个异常。


    异常处理的作用：
        为了提高程序的稳定性、健壮性。



异常体系，所有意外的父类，都是Throwable类。
    异常体系（意外）有两大部分：
        错误，继承Error类的，都是错误。
            通常是指系统出现不可修复的问题，比如内存不足。

            VirtualMachineError 虚拟机错误，java命令发生了错误。
                OutOfMemoryError : 内存不足错误，分配给Java程序使用的内存不足，就会引发此错误。
                StackOverflowError : 栈溢出错误，递归的时候递归太深，就会产生此错误。
                    每调用一个方法，就会分配一个固定大小的栈空间。
                    无限递归的时候，相当于要分配无限的栈空间。内存不是无限的，于是会引发此错误。


            在程序里面，通常不处理“错误”，因为遇到错误，意味着需要调整程序、重启程序。

        异常，继承Exception类的，都是需要程序处理的异常。
            比如读取文件的时候，文件突然中断无法读取，这时候可能是因为文件被改变了位置，或者被删除，导致无法方法。
            这种情况下，可以提示用户，文件无法读取，让用户选择其他的文件来进行处理，程序还是可以继续运行的。

            比如连接网络的时候，无法和服务器进行通讯、通讯超时。这时候可以提示用户选择合适的网络来再次进行操作。
            程序也不需要中断，可以继续执行。


            异常分为两大类
                checked exceptions（已检查异常）
                    Exception和Exception的子类异常，并且排除RuntimeException和RuntimeException的子类异常。
                    已检查异常，要求程序员自己必须处理：
                        要么try catch；要么throws。
                    异常如果一直throws，最终将把异常抛给java命令处理。


                    IOException : 输入、输出的异常，通常是文件读写、网络读写、字符编码等。
                        CharacterCodingException : 字符编码异常。
                        EOFException             : End Of File Exception，读取数据的时候，直接读取到数据的结尾之后。
                        FileNotFoundException    : 文件没有找到异常。
                        UnsupportedEncodingException : 不支持的编码异常。

                    InterruptedException         : 线程被意外中断以后，可能会产生的异常。

                    ReflectiveOperationException : 反射异常。
                        ClassNotFoundException   : 类没有找到异常。
                        NoSuchMethodException    : 没有匹配的方法异常。
                        NoSuchFieldException     : 没有匹配的成员变量异常。
                        InstantiationException   : 通常在通过反射的方式创建一个实例的时候，可能引发此异常。


                    SQLException                 : 使用JDBC的时候，经常容易遇到此异常。


                unchecked exceptions (未检查异常)
                    RuntimeException和RuntimeException的子类异常，都是属于“未检查异常”。
                    这些异常如果程序员没有处理，那么系统默认会自动throws给调用者。如果一直没有处理，最终由java命令处理。


                    NullPointerException      : 空指针异常，如果一个引用类型的变量，等于一个null的时候，访问实例成员，就会引发此异常。
                        int[] arr = null;
                        System.out.println( arr.length );//引发空指针异常

                    IndexOutOfBoundsException : 索引超出边界异常。
                        ArrayIndexOutOfBoundsException  : 数组的索引超出边界异常。
                        StringIndexOutOfBoundsException : 字符串的索引超出边界异常，通常是用索引操作字符串的内容的时候，可能引发。

                    ArithmeticException : 算术异常。

                    ClassCastException  : 类型转换异常。进行强制类型转换的时候，如果实际类型不是被转换的目标类型，会引发此异常。
                        为了避免此异常，尽量强制类型转换之前，先使用 instanceof 运算符判断是否可以被强转。

                    ConcurrentModificationException : 并发修改异常。
                        如果正在使用Iterator遍历一个集合，又使用了集合的add、remove等方法，就会引发此异常。

                    IllegalArgumentException  : 非法参数异常
                        NumberFormatException : 数字格式异常。把字符串使用parseXXX方法，转换为基本类型的时候，可能引发此异常。
                            String x = "abcd";
                            int i = Integer.parseInt( x );

                        PatternSyntaxException : 使用正则表达式的时候，如果表达式不正确，就会引发此异常。

                        UnsupportedCharsetException : 不支持的字符集异常。


        父类，范围比较大。所以称之为“大类”。
        子类，范围比较小。所以称之为“小类”。

        异常也有继承关系，同样具有范围大小的问题。

        try后面，可以跟着多个catch代码块，但是必须把范围小的放在前面！
        异常类型是子类要放在前面。

        否则编译会报错。



异常的处理



自定义异常对象




Java 7以后，对try、catch代码块做了两个优化：


























