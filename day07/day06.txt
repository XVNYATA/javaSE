一，开发工具的介绍(IDE工具) 
     
	 开发工具：用于帮助程序员设计系统的源代码

	 开发工具：可以自动检查代码的错误，提示你代码的错了，可以帮助提示代码应该怎么写！

	 企业中都会选择IDE工具进行程序开发：

	 常用的IDE工具：Eclipse , MyEclipse , Android Studio

	 a.官方下载eclipse工具  
	    eclipse-jee-luna-SR2-win32.zip
	    eclipse-jee-luna-SR2-win32-x86_64.zip  

	 b.直接解压对象的版本到没有中文没有空格的目录下即可。

	 c.必须安装jdk,必须配置JAVA_HOME环境变量 
	   而且安装的jdk的版本也应该与系统的操作系统位数一致

	   --- 配置成功 eclipse才可以成功启动

二,使用eclipse  
      
      一启动会出现一个 WorkSpace(工作空间) 
        ---是一个磁盘路径,用于保存你开发的工程项目
	   D:/code/j1604 

      使用eclipse前的相关配置：  
         配置环境的字符编码 -- 建议开发都使用UTF-8
	 点击 -- “windows” --- "preferences"(首选项) 
	 --->General --->WorkSpace 配置编码“UTF-8”

	小知识点：
	每次重新配置workspace的时候，默认是GBK，
	进入eclipse的安装文件夹，打开eclipse.ini，在最后一行加入
	 -Dfile.encoding=UTF-8
	 默认打开就是UTF-8字符编码


      新建一个工程项目:开发代码 
         点击“file” ---> new ---> "other" ---> "java project"
	 定义一个项目名称 

      新建一个类 :source(src:资源 ，源代码，这下面是放置开发的代码) 
         右键点击"src" --> new --->"class"
         调整eclipse源代码的字体:  点击 -- “windows” --- "preferences"(首选项) 
	                             ---->"输入font" --->点击Colors and fonts
				     ----> Basic ---> Text font 配置字体

      eclipse的项目分为：
           开发结构：   
	           项目名称  
		      src ：程序员开发的源代码 
		      jre : jdk环境 java项目需要jre环境才可以开发和运行

	   项目磁盘结构(工作控件的结构)
	           项目名称  
		       .settings 项目配置信息
		       bin ： 源代码编译以后的class文件
		       src : 程序员开发的源代码 
		       ...

	   程序员只需要关心开发结构即可！

---------------------------------------------------------------------------

一，面向对象  
     
     面向对象是一种编程语言的设计哲学，是存储数据的最佳方式。

     基本上主流的编程语言都是面向对象的设计。

     面向对象最重要的两个概念： 类  对象 

       --- 程序员   设计
       --- 类       设计图纸
       --- 对象     根据设计图纸创造出来的汽车

       --- 类 ：相同事物共同特性的一个描述。  
                相同相似事物的一个类型  

       --- 对象 ： 实实在在存在的具体的一个实例
                    人不是一个人，人是一个类
		    张三是一个实例(对象)


二,类的结构成分   
       
      [修饰符] class 类名称{

            // 成员变量 Field

	    // 方法    

	    // 构造器
      
      }

      类中有”五大成分“
       
      修饰符： public,abstract|final 访问控制符
      类名称： 一般是一个合法的标识符,一般以名词作为类名，要具备意义
                类名的首字母建议大写

      注意：
      一个java文件中只能有一个public修饰的类
      public修饰的class类名必须作为java文件名称

三,成员变量(Field)  
       
       成员变量 ：是用来描述一个类或者一个对象的状态的

       结构：  
         
	 [修饰符]  数据类型 变量名称 [=初始值] ;

       注意：
         --- 修饰符 ：public|private|protected static,final
	 --- public private protected不可以同时出现
	 --- 最多可以出现三个  

	
	 ---- 变量名称，应该是一个合法的标识符
	 ---- 变量一般是几个有意义的名词，成员变量名称建议以小写字符开发
	 ---- 而且需要使用”驼峰模式“定义 

         --- 数据类型,必须是一个java识别的类型
	      -- 基本数据类型(8中)
	      -- 引用数据类型(数据,类,接口)

	   如果一个变量加上了修饰符，它一定是成员变量,必须放在类中

四, 方法(Method) ：是用来描述一个类或者一个对象的行为
         
         结构：   
	     [修饰符] 返回类型 方法名称(0~N个形参列表){
	          // 执行代码  
	     }

         注意点：
	    
	     修饰符：public|private|protected , static , final , abstract 


             返回类型：  
	          ---返回类型可以是：基本数据类型,引用数据类型
		  ---如果申明了返回类型，方法中就必须要有return语句
		      return的一定是对应返回类型的数据，
		      如果申明了返回类型只要有return语句就不会报错，方法不关心执行代码怎么写！
                  ---如果方法没有返回类型就申明void
	     
	     方法名称:
	          ---- 方法名称，应该是一个合法的标识符
		  ---- 方法名称一般是几个有意义的动词，方法名称建议以小写字符开始
		  ---- 而且需要使用”驼峰模式“定义 
             
	     形参列表： 
	        (类型 形参变量名称 ,类型 形参变量名称,类型 形参变量名称)
		-形参类型可以是：基本数据类型,引用数据类型
		-可以指定多个形参，多个形参使用","隔开
		-也可以不指定形参
		-形参变量不能指定初始值

五,构造器(Constructor) ： 用来创建对象的   
         
	 结构：   
	      [修饰符] 类名(0~N个形参列表){
	           // 执行代码 
	      }

	      注意： 构造器有时候也叫构造方法，
	             构造器不是方法，构造器是一种特殊的方法，构造器没有返回类型申明
		     构造器的名称必须是类名称！！！！
		     通过new 构造器 可以返回一个类型，该类型是类的对象。

六，实际上面向对象有三句话：新建类，创建对象 调用方法 
      
      /**************************************/
        static(静态)关键字：
                如果static用来修饰成员变量，那么这个成员变量就是静态成员变量，同时它就属于类成员变量
		如果没有static修饰的成员变量，那么这个成员变量就是实例成员变量，同时它就属于实例的成员变量
                
                如果static用来修饰方法，那么这个方法就是静态方法，同时它就属于类的方法
		如果没有static修饰的方法，那么这个方法就是实例方法，同时它就属于实例的方法

     
      /**************************************/
      
      
      创建对象：
      
          new 构造器; 构造器就是用来创建对象的。
	  具体是调用哪一个构造器需要根据形参来确定。

	  当一个类没有定义任何构造器的时候会默认自带一个无参数的构造器 
		 *  但是，如果你自定义一个有参数的构造器,无参数的构造器就没有了
		 *  所以，当定义一个有参数的构造器的时候，最好也将无参数的构造器定义出来
         
	  对象作用：调用非static修饰的成员变量
	             调用非static修饰的方法


      访问成员变量：   
             有static修饰的成员变量应该用类来调用。
	     没有static修饰的成员变量，属于实例的，必须用对象来调用。

	     注意点：  类不能直接访问实例成员变量
	               对象是可以访问类的成员变量(有static修饰的就是类的)
		        -- 强烈不建议使用对象访问类的成员变量，虽然这样做是没有错误的！因为静态成员变量属于类，所以用类直接访问更好。
			-- 这个语法就是用来面试的！以后遇到用对象调用静态成员变量的建议将
			   对象改成类来调用。

     调用方法： 
           有static修饰的方法应该用类来调用。
	   没有static修饰的方法，属于实例的，必须用对象来调用该方法。

	   主调.方法名(参数值列表);

	   主调： 根据方法的性质决定，有static修饰 主调是类。
	          没有static修饰,主调是对象。
     
      
     变量详解：
               
        变量： 分为成员变量和局部变量
	        --- 成员变量属于类的成分：分为static修饰的静态成员变量,没有static修饰的实例成员变量
	        --- 局部变量(方法中的变量,形参变量,代码块中的变量)
	        
		注意：成员变量的名称不能重复。
		       访问变量，如果没有主调,先到局部变量中找，再到成员变量中找
		       访问变量,申明了主调，会到主调中找 类.变量(在static变量中找)

		       因为类只有一个，所以static修饰的成员变量，当JVM
		       加载类的时，static修饰的成员变量或者方法或者代码块只会加载一次

		       实例变量或者实例代码块,实例方法，对象有几个 它们就分配几个。
		       每个对象都拥有自己的实例变量和实力代码块以及实例方法

		              成员变量可以不指定初始值   
			 *    成员变量初始值是默认值：  
			 *    数值类型都是 0  
			 *    boolean 是false
			 *    引用类型都是null


			 /**
			 *  局部变量定义的时候可以不给初始值 
			 *  但是在使用之前必须给初始值
			 * */

       this关键字：  
            this在方法中，开始并不知道代表哪个实例
	    哪个实例调用这个方法 this就代表哪个实例   

	    在一个方法中调用另一方法,实际上默认加上了当前实例(this)来调用的

	    this不能出现在static方法中

	    this 在构造器中代表正在创建的对象
             
