程序的作用：
    1.用于被人控制电脑。
    2.在控制电脑的过程中，会产生大量的数据（信息）。这些信息都被称之为“变量”。

    归根到底，程序用于处理数据。

    电脑里面运算单元是CPU，CPU不能处理硬盘上的数据，必须把数据放到内存里面！
    当把硬盘里面的数据，放到内存中，就是变量。

变量
    变量可以理解为数据的容器，用于装数据。

    容器是有容量的，不同容量的容器可以装不同的数量的数据。
    数据的数量，使用字节来计算。一个字节8个位。每个位，就是一个开关。

    变量的容器，被称之为“数据类型”。Java有很多的数据类型，但是通过一定的规律，很容易掌握。


    变量的语法：

        <>表示必须的，但是可以改变
        []表示可选的、可变的。

        <数据类型>  <变量名> [= 初始值];

        //使用byte数据类型，定义一个名为ab的变量。
        //这个变量没有初始值，变量必须有值才能被使用。
        byte ab;

        //使用int类型，定义一个名为cd的变量。
        //并且这个变量赋予初始值100。
        int cd = 100;

        变量名必须是一个“标识符”


    八种基本数据类型
        四个整数
            byte  占一个字节，8位，可以表示256个不同的数字，可以表示的数字的范围比较小，相当于容器比较小。
                整数有正数、负数的区别，256个数字里面，分了一半作为负数，于是byte的表示范围是 -128 ~ 127。

                数字的最高位如果是1，那么这个数字就是负数。

            short 占两个字节，16位，表示范围 -32768 ~ 32767 ，一共有65536个状态。
            int   占四个字节，32位，表示范围 -21亿  ~ 21亿，默认的整数类型。
            long  占八个字节，64位，表示范围 -2^63  ~ 2^63-1


            注意点：
                1.整数的默认类型是int类型。
                2.给整数赋予超出范围的值的时候，编译会报错。
                    如果一定要赋予超出范围的值，必须强制类型转换。
                    如果给整数赋予正好属于它范围的值，那么系统会自动类型转换。
                3.如果要给long赋予超出int的范围的值，必须在数字的后面加上L。
                4.如果把低位的变量的值，赋予给高位变量，会自动类型转换；
                    反过来把高位的赋予给低位的，需要强制类型转换。


            四种表示形式
                1.默认使用十进制的方式
                    int i1 = 100;
                2.如果是0X开头，使用十六进制
                    int i2 = 0X100;
                3.如果是0开头，自动是八进制
                    int i3 = 0100;
                4.从Java 7开始，支持0B开头，表示二进制形式
                    int i4 = 0B100;

        二种浮点，可以有小数点
            float
                32位，占四个字节，如果直接给float类型的变量赋予数字，必须在数字的后面加上F。
                表示的范围是 10的-128次方 ～ 10的127次方
            double
                64位，占8个字节，是浮点的默认数据类型。双精度浮点，精度更高，小数位更多。

            浮点里面，使用科学计数法存储数据
                底数 : 10的多少次方，10是底数
                尾数 : 带小数点的、不能整除的部分
                指数 : 多少次方

                1.2 * 10^5 = 120000 = 1.2E5

                在浮点使用的科学计数法，底数永远是10。E5就表示10的5次方。


            float f1 = 1.2E5F;
            float f2 = 120000F;

            double d1 = 1.2E5;
            double d2 = 120000;

            浮点有两种表示形式
                默认的十进制
                    double d2 = 120000;
                科学计数法方式
                    double d1 = 1.2E5;


            三个特殊值
                在数学里面，除数是不能为0的。包括Java的整数的除法，也不能除以0。
                但是浮点可以，只是会得到三个特殊的值。

                正无穷大 : 正数除以0.0，所有的正无穷大都相等
                负无穷大 : 负数除以0.0，所有的负无穷大都相等
                非数     : 0除以0.0   ，所有的非数都不相等，Not A Nunmber （ NaN ）

            注意点：
                1.浮点的默认值是double，如果要给float赋予直接的数字，需要在数字后面加上F。
                2.float的位数比较小，double位数比较大的，所以把float赋予给double会自动类型转换。
                    把double的值赋予给float，需要强制类型转换。
                3.因为浮点使用科学计数法，所以任何一个浮点都要所有的整数范围要大得多。
                    long x1 = 2^63-1;
                    float f1 = 10^127;

                    所以任何整数都可以直接赋予给浮点。
                    而浮点的要转换为整数，需要强制转换，并且小数位会丢失！


        一种字符
            char


            计算机里面最小的存储单位是byte（字节）

            1024Byte = 1KB
            1024KB   = 1MB
            1024MB   = 1GB
            1024GB   = 1TB
            1024TB   = 1PB
            1024PB   = 1ZB


            单个字符的存储，需要大量的存储空间，并且字符的出现次数是多次出现的！
            为了降低对硬件的要求，给每个字符一个数字编号，存储的时候只需要使用编号，而不使用字符。
            早期的时候一个编号就是一个字节。
            使用的电脑自动根据编号，从字库里面把对应的符号（字符、标点）找到，并显示在屏幕上。

            Java使用两个字节来表示一个字符。所以char类型占用两个字节、16位。

            char c1 = 97;

            字符的四种表示形式
                使用单引号把一个字符包起来
                    char c1 = 'a';

                使用数字编号
                    char c2 = 97;

                使用转义符

                    \就是转义符，表示后面的字符的含义临时被改变
                    \' 表示后面的 ' 不是作为单引号来使用，而是作为一个字符来使用！

                    char c3 = '\'';

                    char c4 = '\\';

                    \t   表示Tab键
                    \n   表示换行
                    \r   表示回车


                使用十六进制形式
                    char使用两个字节来表示一个字符。
                    每个字节的十六进制是从  0x00 ~ 0xFF  （ 0 ～ 255）
                    因为使用两个字节，所以范围是  0000 ~ FFFF  ( 00000 ~ 65535 )


                    char c5 = '\u0061';  // a


            对字符进行编号的规律，被称之为“字符集”、“字符编码”等。

            早期的时候，只有ASCII是国际通用的编码，使用一个字节，可以表示的范围是英文的字母、数字、常用符号、打印机控制字符。
            后来在全世界普及的时候，ASCII已经不足以满足需求，于是不同的国家针对自己的情况，编写自己的字符编码。
            中国早期使用的是GB2312，包括常用简体字。繁体字是由香港和台湾共同制定的BIG 5。
            GB2312只是包含的常用字，生僻字全部没有，导致很多文字无法录入系统，于是后来出现了GBK、GB18030等各种规范。

            除了中国有如此之多的规范，其他的非英语世界的国家，也有自己的规范，包括日本、韩国，所有这些国家都自行制定编码，于是新的问题出现了：
            中国人使用GBK给日本人发了一封邮件，因为邮件的内容全部是字符的编号，而不是字符。日本人的电脑里面没有GBK的字符集，于是出现了“乱码”。


            万国码（Unicode），统一字符编码，目的是为了统一全世界所有国家和地区的字符需求。
            目前比较流行的编码，是UTF-8，使用两个字节或者三个字节的方式表示一个字符。

            但是Java里面，则使用统一的两个字节（Unicode）表示一个字符。
            Java的程序在编译的时候，需要根据不同的字符集，指定编码方式，而运行的时候不需要。
                

        一种布尔
            boolean

            boolean通常都是用于比较运算、逻辑运算的时候的值，只能出现两个值：true、false。

            boolean b1 = true; //真
            boolean b2 = false;//假


    引用数据类型
        以后写的每个类，就是一种引用数据类型。
        数组也是引用数据类型。

        以后再来讲。


标识符
    标识符是程序里面的成分的名字，比如变量、类、方法、标签等都需要名字。
    这些名字必须符合一定的规则。

    1.不能数字开头

        //错误
        int 2a = 100;

        //正确
        int a2 = 100;

    2.除了下划线之外，其他的任何符号都不能作为标识符的一部分
    3.不能是关键字、保留字，但是可以包含

        //错误
        int public = 100;

        //正确，因为只是包含public这个关键字
        int public_ = 100;

    4.标识符不能包含空格、回车、其他的任何标点和运算符


    起名有个建议的规则：
        变量名，通常首字母小写，之后的每个单词首字母大写。
            threadPool
        类名，  建议每个单词首字母大写
            ThreadPool
        方法名，和变量名一样
        构造器名，等于类名




运算符
    赋值运算符

        =

        把等号右边的值，复制一份给等号的左边。

        int i1 = 10;

        int i2 = i1;

        i1 = 100;
        //i2的值，是原来的i1的副本，修改i1的值不会影响到i2
        System.out.println(i2);


    数学运算符

        +  : 加法

        -  : 减法

        *  : 乘法

        /  : 除法，返回商

        %  : 除法，但是返回余数


    扩展后的赋值运算符
        所有的数学运算符和位运算符，都可以和等号组合，形成扩展运算符。

        int i = 5;

        //i = i + 5;
        i += 5;

        System.out.println(i);


        +=
        -=
        *=
        /=
        %=


    比较运算符
        比较的时候，不考虑数据类型，只是比较数值。返回的结果是boolean类型的，只有true、false两个值。

        >
        <
        >=
        <=
        ==
        !=


        boolean b1 = 5 > 6;//false
        boolean b2 = 5 < 6;//true

        System.out.println( b1 );
        System.out.println( b2 );

        特别注意：
            如果是由两个符号组成的运算符，必须两个符号连接在一起，中间不能有空格。



    逻辑运算符
        只能操作boolean类型的变量

        & : 两边都是true的时候，结果为true。有一个为false，结果一定false。
        | : 两边有一个为true的时候，结果为true。
        ^ : 两边不等的时候，结果为true。
        ! : 对boolean进行取反，只能在 运算符 的右边有一个变量。

        短路运算，可以提高性能、效率。

            &&   : 如果运算符左边的已经为false，那么运算符右边的表达式不会执行。
            ||   : 如果运算符左边的已经为true，那么运算符右边的不会执行。

        实际使用 & | 的时候，建议使用短路运算符。


    位运算符
        直接在二进制上面对数据进行操作，位运算符操作的变量，都是数值型的变量。
        八种基本数据类型里面，除了boolean以外，其他都是数值型的类型。
        

        &   : 按位与
        |   : 按位或
        ^   : 按位异或
        ~   : 取反
            int i = 10;
            int k = ~i;
            
        >>  : 右移多少位，符号位不变，高位补符号位，相当于每移一位除以2。
        >>> : 连符号位一起右移，最高位补零，正整数也相当于是除以2，负数会变成正数。
        <<  : 左移，在地位补零，相当于每移一位乘以2。

    数学运算符和位运算符返回的结果，始终是高位的为准的。


数据类型转换
    自动转换

    强制转换

    表达式类型自动提升
        1.所有位数低于int的类型，进行数学、位运算，结果都是int

            char c1 = 'a';
            char c2 = 'b';

            // char的类型是16位，低于int，所以执行加运算以后变成int类型。
            char c3 = (char)(c1 + c2);

        2.如果在同一个表达式里面，有位数的，也有位数高的，结果以位数高的为准。
            int i = 5;
            long x = 100;

            // x是long的，所以 i + x 的结果是long类型的
            long y = i + x;

        3.任何数值和浮点进行运算，结果一定是浮点。

            long x = 100;
            float f = 50f;

            // 虽然long是64位的，而float是32位的，但是浮点的范围远远比整数的范围大得多。
            //所以 f + x 以后的结果是float类型。
            long y = (long)(f + x);


        4.任何类型的数据，和String类型的进行相加，结果都是 String 

            String s = "HelloWorld";
            int i = 50;

            // s是String类型的，加了以后结果一定是String
            // 而且和String进行运算，只有 加 操作。
            String s2 = s + i;



重点
    变量的语法
    八种基本数据类型
        int
        double
        char
        boolean

    运算符
        赋值运算符
        数学运算符
        比较运算符
        逻辑运算符









