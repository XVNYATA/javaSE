回顾
    if
        如果条件为true，执行分支里面的代码


        if( 条件 )
        {
        }

        [ else if ( 条件 ){} ]...

        [ else {} ]


    for

        重复执行代码

        for( [初始语句]; [循环条件]; [迭代语句])
        {
            //循环体（执行体）
        }


        初始语句：用于声明循环里面可用的变量，只会在循环条件执行之前，执行一次。
        循环条件：判断是否需要继续执行循环体，如果为true则需要执行。默认为true。
        迭代语句：在循环体执行完成以后，执行一次。迭代语句完成以后，再执行循环条件，判断是否继续循环。



    switch
        switch( 变量 )
        {
            case 值:
                //执行语句
                [break;]

            case ...

            default:
                前面条件都不符合的时候，执行default
        }


        进入case以后，必须要遇到break才能结束switch，否则之后的case不会判断，语句直接执行。



    while


        while( 循环条件 )
        {
            循环体
        }


    do while

        do
        {
            //循环体
        }
        while( 循环体 );


    嵌套循环
        循环里面有循环

    循环控制
        continue : 忽略当次循环剩余执行语句，进行下一次循环判断
        break    : 终止当前循环
        return   : 终止当前方法



数组
    存储大量相同类型的数据，数据本身就是体现为变量。数组是用来存储大量相同类型变量的一种数据类型。
    数组是一种引用数据类型

    数据类型分为基本数据类型、引用数据类型


    HelloWorld  =>
 
    char c1 = 'H';
    char c2 = 'e';
    char c3 = 'l';
    char c4 = 'l';
    ...


    数组类型，只需要在任何现有类型的后面，加上一对[]，就变成了数组类型。

    byte   =>  byte[]
    short  =>  short[]
    char   =>  char[]
    int    =>  int[]
    long   =>  long[]
    float  =>  float[]
    double =>  double[]
    boolean=>  boolean[]

    String =>  String[]

    // 二维数组
    int[]  =>  int[][]
    // 三维数组
    int[][]=>  int[][][]


    数组在使用的时候，必须要初始化才能使用。

    数据类型 变量名 = 初始值;


    int[]    arr   = new ...;


    数组的两种初始化方式
        数组静态初始化
            指定内容，不指定数组的长度。数组长度自动根据内容计算得到。

            数据类型[]  数组变量名 = new 数据类型[]{  里面指定内容，使用逗号隔开多个值  };

            int[] arr = new int[]{ 45, 67, 12, 34, 99 };

        数组动态初始化
            指定长度，不指定内容。所有的内容，会自动赋予默认值。
            长度是int类型的，并且只能是正整数。

            数据类型[]  数组变量名  = new 数据类型[  长度  ];

            int[] arr1 = new int[ 10 ];

            String[] s1 = new String[ 5 ];


            不同数据的默认值不同：
                整数     0
                浮点     0.0
                char     0
                布尔     false
                引用类型 null

    使用数组
        数组的长度，int类型
            数组变量名.length

            数组     的  长度

            // 输出 arr 变量的长度
            System.out.println( arr.length );

            //把高位变量赋予给低位变量，要强转
            byte b = arr1.length;


        获取数据里面的数据
            数据里面虽然有很多的数据，但是这些数据是有序的。
            只需要从第一个开始往后找，就能够找到自己需要的数据。

            数组里面的数据，被称之为“元素”。
            每个元素，都有一个“索引”，下标、角标。英语里面是index。
            索引从0开始计算，0是第一个正整数。


            变量名[ 索引 ]   : 获取、设置元素的值

            使用数组元素的时候，就是把数组的元素，作为一个变量来使用。
    

内存划分：
    栈 : Stack，里面的数据是有序的，空间非常小。Java 默认情况下只有256KB。
        相当于是名单。
        名单里面的姓名，是变量名。
        名单里面的位置，就是内存地址，存储在栈里面。


        基本类型的值，具体存储在哪里，需要根据变量放在不同的位置不同。
        目前在main方法里面声明的基本类型变量的值，全部存储在栈里面。


    堆 : Heap，里面的数据是无序的，不能直接访问，必须通过内存地址来访问。
        堆里面，就是整个班级。
        在堆里面，有一群学生。
        这些学生都在一个位置（内存地址）上面坐着。

    引用类型的变量内存分配过程：
        1.在栈里面分配一个空间，用于存储变量名和内存地址。
        2.使用new的时候，就会在堆里面开辟空间，存储实际的内容，并返回内存地址。
        3.返回的内存地址，会在栈里面存储起来。



数据的常见异常
    NullPointerException  空指针异常
        引用类型有一个特别的值，就是null。
        null表示这个变量没有内存地址、没有指向堆里面的实际数据。

        int[] arr = null;
        //输出数组的长度，这时因为arr没有指向实际的数据，所以会出现空指针异常。
        System.out.println( arr.length );

    ArrayIndexOutOfBoundsException 数组索引越界
        在使用数组的时候，如果传入的索引小于0，或者大于等于数组的长度，就会产生此异常。

        int[] arr = new int[ 5 ];

        // 这个5已经是等于数组的长度，所以不能作为索引。
        // 最大的索引只能是 长度减一
        //arr[ 5 ] = 100;


        // 最小的索引是0，所以负数不能作为索引值使用
        arr[-1] = 100;
        



输出数组里面所有的内容
    TestPrintArray.java


给数组里面每个元素赋值
    TestSetValue.java


给数组里面每个元素赋予随机值
    TestSetRandomValue.java


    通常会使用 java.util.Random 类来辅助生成随机数。
    在Java里面生成随机数是通过 Math.random() 方法来生成的。
    但是 Math.random() 生成 0~1 之间的double随机值，不方便使用。
    因此通常使用 Random 类。

    使用Random类需要三个步骤：
        1.在源代码的第一行写导入语句
            import java.util.Random;

        2.在main方法里面，创建一个Random类的实例（对象）
            创建Random对象，只需要在循环的外面创建即可。

            Random 是一个数据类型


            Random r = new Random();

        3.调用r变量的nextInt方法，可以得到随机整数
            每次循环都需要生成一个随机值。

            int t = r.nextInt();



随机字符练习，通常图片验证码是4位的字符，所以循环四次即可
    1.导入Random
    2.创建Random的实例（对象）
    3.使用循环，生成 0 ~ 26 ，包括 0 ，不包括26的随机数。
        如果想要生成大写字母，只需要 随机值 加上 'A'

        int t = r.nextInt( 26 );

        // 字符本质就是数字，可以直接相加！
        // 下面这个加法，相当于 t + 65
        char c = (char) (t + 'A');



数组复制
    TestArrayCopy.java

    1.数组（引用类型）变量直接赋值，无法得到副本。
    2.要想得到两个互不干涉的副本，必须使用new再创建一个实例，把原始数据复制到新的实例里面。


数组扩展容量

    TestArrayExtend

    Java里面的数组容量在初始化了以后，是不允许改变的！
    从语言本身、语法等各种角度看，Java的数组都是不允许扩容的。
    有时候就会有需要扩容的需求，这种情况下，只能实现变相的扩容。

    其实这种扩容就是数组的复制。这种复制的时候，新数组的长度比原始数组的长度要大。

    1.产生一个比原始数组大的新数组
    2.把原始数组里面的内容放到新数组里面
    3.把新数组赋予给原始数组的变量


简化的for循环

    TestForEach.java


    for( int i = 0; i < a1.length; i++)
    {
        // i 严格来讲只有一个作用：从a1变量里面获取元素
        int t = a1[i];
        System.out.print( t );
        System.out.print(",");
    }


    简化的for循环，被称之为for-each。
    会自动根据数组的长度循环，循环的次数和数组长度一样。
    每次循环总是获取下一个值放到变量里面。

    for-each只能读取数组的内容，不能给数组里面元素赋值。
    for-each是在Java 5以后提供的。


    for( 数组的数据类型 变量名 : 数组的变量名 )
    {
    }


    for( int t : a1 )
    {
        System.out.print( t ); 
        System.out.print( "," ); 
    }


二维数组

    Test2DArray.java

    数组的数组

    int[]  -> int[][]  int数组的数组

    其实没有二维数组，更加不会有多维数组！全部和之前的数组是一样，只需要把数组里面的元素看做是一个完整的变量来理解！

    理解二维数组，直接使用电子表格。
    在电子表格里面，有行、列表。
    电子表格的行，就是直接坐标系的y轴。每行都有很多个格子，每个格子相当于就是x轴。
    二维数组里面，第一个[]指的就是行，第二个中括号指的是是格子。

    使用静态初始化方式，声明一个横向5、纵向6的二维坐标

    //纵向为6，表示6行。
    //横向为5，表示每行都有5列，每行的列数不是固定的。
    int[][] arr = new int[][]
    {
        {11,12,13,14,15},
        {21,22,23,24,25},
        {31,32,33,34,35},
        {41,42,43,44,45},
        {51,52,53,54,55},
        {61,62,63,64,65}
    };


    //获取arr里面的第一行，每行的数据类型都是数组
    int[] row = arr[0];

    //获取第一行第一列的值
    int first = row[0];

    int second = arr[0][0];

    //获取第一行第三列
    int i3 = row[2];
    //           y  x
    int i4 = arr[0][2];//13

    //获取第4行的第二列的值
    int i5 = arr[3][1];//42

命令行参数

    TestCommandLineArguments.java

    在main方法的()里面，使用了String[]，就是一个数组。
    这个数组是用来接收java命令后面传递给程序的参数的。

    比如复制文件的时候，需要一个源文件和一个目标位置，需要两个参数，那么这两个参数分别放在 args[0] 和 args[1] 里面。



运行时控制台输入

    TestScanner.java

    需要使用标准输入流。
    在这之前，一直在使用 System.out 。这个是标准输出流。
    标准输入流 System.in 就是标准输入流。

    直接使用流来获取信息，是很麻烦的。因此Java提供了 java.util.Scanner 来简化操作

    使用步骤
        1.导入Scanner
            import java.util.Scanner;


        2.创建Scanner实例

            // 在创建Scanner的时候，要提供标准输入流
            Scanner s = new Scanner( System.in );

        3.调用next开头的方法，可以获得用户的输入

            s.next()    返回String类型
            s.nextInt() 返回int类型，如果输入的内容，无法被转换为int，报错
            s.nextDouble...



重点
    数组的两种初始化方式
    获取数组的长度
    获取数组的元素
    给数组的元素赋值
    遍历数组（for循环，和简化的for循环）









