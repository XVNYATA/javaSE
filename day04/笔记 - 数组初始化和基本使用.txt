回顾
    if
        如果条件为true，执行分支里面的代码


        if( 条件 )
        {
        }

        [ else if ( 条件 ){} ]...

        [ else {} ]


    for

        重复执行代码

        for( [初始语句]; [循环条件]; [迭代语句])
        {
            //循环体（执行体）
        }


        初始语句：用于声明循环里面可用的变量，只会在循环条件执行之前，执行一次。
        循环条件：判断是否需要继续执行循环体，如果为true则需要执行。默认为true。
        迭代语句：在循环体执行完成以后，执行一次。迭代语句完成以后，再执行循环条件，判断是否继续循环。



    switch
        switch( 变量 )
        {
            case 值:
                //执行语句
                [break;]

            case ...

            default:
                前面条件都不符合的时候，执行default
        }


        进入case以后，必须要遇到break才能结束switch，否则之后的case不会判断，语句直接执行。



    while


        while( 循环条件 )
        {
            循环体
        }


    do while

        do
        {
            //循环体
        }
        while( 循环体 );


    嵌套循环
        循环里面有循环

    循环控制
        continue : 忽略当次循环剩余执行语句，进行下一次循环判断
        break    : 终止当前循环
        return   : 终止当前方法



数组
    存储大量相同类型的数据
    数组是一种引用数据类型

    数据类型分为基本数据类型、引用数据类型


    HelloWorld  =>
 
    char c1 = 'H';
    char c2 = 'e';
    char c3 = 'l';
    char c4 = 'l';
    ...


    数组类型，只需要在任何现有类型的后面，加上一对[]，就变成了数组类型。

    byte   =>  byte[]
    short  =>  short[]
    char   =>  char[]
    int    =>  int[]
    long   =>  long[]
    float  =>  float[]
    double =>  double[]
    boolean=>  boolean[]

    String =>  String[]

    // 二维数组
    int[]  =>  int[][]
    // 三维数组
    int[][]=>  int[][][]


    数组在使用的时候，必须要初始化才能使用。

    数据类型 变量名 = 初始值;


    int[]    arr   = new ...;


    数组的两种初始化方式
        数组静态初始化
            指定内容，不指定数组的长度。数组长度自动根据内容计算得到。

            数据类型[]  数组变量名 = new 数据类型[]{  里面指定内容，使用逗号隔开多个值  };

            int[] arr = new int[]{ 45, 67, 12, 34, 99 };

        数组动态初始化
            指定长度，不指定内容。所有的内容，会自动赋予默认值。
            长度是int类型的，并且只能是正整数。

            数据类型[]  数组变量名  = new 数据类型[  长度  ];

            int[] arr1 = new int[ 10 ];

            String[] s1 = new String[ 5 ];


            不同数据的默认值不同：
                整数     0
                浮点     0.0
                char     0
                布尔     false
                引用类型 null

    使用数组
        数组的长度，int类型
            数组变量名.length

            数组     的  长度

            // 输出 arr 变量的长度
            System.out.println( arr.length );

            //把高位变量赋予给低位变量，要强转
            byte b = arr1.length;


        获取数据里面的数据
            数据里面虽然有很多的数据，但是这些数据是有序的。
            只需要从第一个开始往后找，就能够找到自己需要的数据。

            数组里面的数据，被称之为“元素”。
            每个元素，都有一个“索引”，下标、角标。英语里面是index。
            索引从0开始计算，0是第一个正整数。


            变量名[ 索引 ]   : 获取、设置元素的值

            使用数组元素的时候，就是把数组的元素，作为一个变量来使用。
    

内存划分：
    栈 : Stack，里面的数据是有序的，空间非常小。Java 默认情况下只有256KB。
        相当于是名单。
        名单里面的姓名，是变量名。
        名单里面的位置，就是内存地址，存储在栈里面。


        基本类型的值，具体存储在哪里，需要根据变量放在不同的位置不同。
        目前在main方法里面声明的基本类型变量的值，全部存储在栈里面。


    堆 : Heap，里面的数据是无序的，不能直接访问，必须通过内存地址来访问。
        堆里面，就是整个班级。
        在堆里面，有一群学生。
        这些学生都在一个位置（内存地址）上面坐着。

    引用类型的变量内存分配过程：
        1.在栈里面分配一个空间，用于存储变量名和内存地址。
        2.使用new的时候，就会在堆里面开辟空间，存储实际的内容，并返回内存地址。
        3.返回的内存地址，会在栈里面存储起来。


        








